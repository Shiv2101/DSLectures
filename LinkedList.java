class ListNode{    private int data;    private ListNode next;    public ListNode(int data){    this.data  = data;    }    public int getData() {        return data;    }    public void setData(int data) {        this.data = data;    }    public ListNode getNext() {        return next;    }    public void setNext(ListNode next) {        this.next = next;    }}class LinkList{    private int length;    ListNode head;    public LinkList(){        length = 0;    }    public synchronized ListNode getHead(){        return head;    }    public synchronized void insertAtBegin( ListNode node){        node.setNext(head);        head = node;        length++;    }    public synchronized void insertAtEnd( ListNode node){        if(head == null)            head = node;        else{            ListNode p,q;            for(p=head;(q = p.getNext())!=null;p = q);            p.setNext(node);        }        length++;    }    public void insert (int data,int position){        if(position<0)            position = 0;        if(position>length)            position = length;        if(head == null)            head = new ListNode(data);        else if(position == 0){            ListNode temp = new ListNode(data);            temp.setNext(head);            head = temp;        }        else{            ListNode temp = head;            for (int i = 1; i < position; i++) {                temp = temp.getNext();            }            ListNode x = new ListNode(data);            x.setNext(temp.getNext());            temp.setNext(x);        }        length++;    }    public void remove(int position){        if(position < 0)            position=0;        if(position>=length)            position = length-1;        if(head == null)            return;        if(position == 0){            head = head.getNext();        }        else {            ListNode temp = head;            for (int i = 1; i <position ; i++) {                temp = temp.getNext();            }            temp.setNext(temp.getNext().getNext());        }        length--;    }    public String toString(){        String result ="[";        if(head == null){            return result + "]";        }        result = result + head.getData();        ListNode temp  = head.getNext();        while (temp != null){            result = result +","+temp.getData();            temp = temp.getNext();        }        return result+"]";    }    public int getLength() {        return length;    }}public class LinkedList {    public static void main(String[] args) {        LinkList list1 = new LinkList();        list1.insertAtEnd(new ListNode(10));        list1.insertAtEnd(new ListNode(20));        list1.insertAtEnd(new ListNode(30));        list1.insertAtEnd(new ListNode(40));        list1.insertAtBegin(new ListNode(100));        list1.insert(50,3);        list1.remove(4);        System.out.println(list1.toString());    }}// singly// doubly// circular// circular doubly